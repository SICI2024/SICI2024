
LEDtesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  2000000c  08002ba4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e64  08002ba4  00020e64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000887e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001799  00000000  00000000  000288b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016740  00000000  00000000  0002b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a387  00000000  00000000  00041ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842d3  00000000  00000000  0004be3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  000d0164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b54 	.word	0x08002b54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b54 	.word	0x08002b54

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  // Stop DMA based on the timer and channel
  if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800015c:	d108      	bne.n	8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	7f1b      	ldrb	r3, [r3, #28]
 8000162:	2b01      	cmp	r3, #1
 8000164:	d104      	bne.n	8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8000166:	210c      	movs	r1, #12
 8000168:	6878      	ldr	r0, [r7, #4]
 800016a:	f001 ffef 	bl	800214c <HAL_TIM_PWM_Stop_DMA>
 800016e:	e028      	b.n	80001c2 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
  } else if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000178:	d108      	bne.n	800018c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	7f1b      	ldrb	r3, [r3, #28]
 800017e:	2b02      	cmp	r3, #2
 8000180:	d104      	bne.n	800018c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000182:	2100      	movs	r1, #0
 8000184:	6878      	ldr	r0, [r7, #4]
 8000186:	f001 ffe1 	bl	800214c <HAL_TIM_PWM_Stop_DMA>
 800018a:	e01a      	b.n	80001c2 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
  } else if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d108      	bne.n	80001a8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	7f1b      	ldrb	r3, [r3, #28]
 800019a:	2b04      	cmp	r3, #4
 800019c:	d104      	bne.n	80001a8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800019e:	2104      	movs	r1, #4
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f001 ffd3 	bl	800214c <HAL_TIM_PWM_Stop_DMA>
 80001a6:	e00c      	b.n	80001c2 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
  } else if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80001ae:	4293      	cmp	r3, r2
 80001b0:	d107      	bne.n	80001c2 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	7f1b      	ldrb	r3, [r3, #28]
 80001b6:	2b08      	cmp	r3, #8
 80001b8:	d103      	bne.n	80001c2 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 80001ba:	210c      	movs	r1, #12
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f001 ffc5 	bl	800214c <HAL_TIM_PWM_Stop_DMA>
  }

  dataSentFlag = 1;
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	40000400 	.word	0x40000400
 80001d4:	200001c8 	.word	0x200001c8

080001d8 <Set_LED>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, 24);
//}

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
 80001e4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	b2d9      	uxtb	r1, r3
 80001ea:	4a10      	ldr	r2, [pc, #64]	; (800022c <Set_LED+0x54>)
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	b2d9      	uxtb	r1, r3
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <Set_LED+0x54>)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	4413      	add	r3, r2
 80001fe:	460a      	mov	r2, r1
 8000200:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	b2d9      	uxtb	r1, r3
 8000206:	4a09      	ldr	r2, [pc, #36]	; (800022c <Set_LED+0x54>)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2d9      	uxtb	r1, r3
 8000216:	4a05      	ldr	r2, [pc, #20]	; (800022c <Set_LED+0x54>)
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	4413      	add	r3, r2
 800021e:	460a      	mov	r2, r1
 8000220:	70da      	strb	r2, [r3, #3]
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200001cc 	.word	0x200001cc

08000230 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (char ledStrip)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	uint32_t indx=0;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	61bb      	str	r3, [r7, #24]
 8000242:	e036      	b.n	80002b2 <WS2812_Send+0x82>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000244:	4a46      	ldr	r2, [pc, #280]	; (8000360 <WS2812_Send+0x130>)
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	785b      	ldrb	r3, [r3, #1]
 800024e:	041a      	lsls	r2, r3, #16
 8000250:	4943      	ldr	r1, [pc, #268]	; (8000360 <WS2812_Send+0x130>)
 8000252:	69bb      	ldr	r3, [r7, #24]
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	789b      	ldrb	r3, [r3, #2]
 800025a:	021b      	lsls	r3, r3, #8
 800025c:	431a      	orrs	r2, r3
 800025e:	4940      	ldr	r1, [pc, #256]	; (8000360 <WS2812_Send+0x130>)
 8000260:	69bb      	ldr	r3, [r7, #24]
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	440b      	add	r3, r1
 8000266:	78db      	ldrb	r3, [r3, #3]
 8000268:	4313      	orrs	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
#endif

		for (int i=23; i>=0; i--)
 800026c:	2317      	movs	r3, #23
 800026e:	617b      	str	r3, [r7, #20]
 8000270:	e019      	b.n	80002a6 <WS2812_Send+0x76>
		{
			if (color&(1<<i))
 8000272:	2201      	movs	r2, #1
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	461a      	mov	r2, r3
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4013      	ands	r3, r2
 8000280:	2b00      	cmp	r3, #0
 8000282:	d005      	beq.n	8000290 <WS2812_Send+0x60>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000284:	4a37      	ldr	r2, [pc, #220]	; (8000364 <WS2812_Send+0x134>)
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	213c      	movs	r1, #60	; 0x3c
 800028a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800028e:	e004      	b.n	800029a <WS2812_Send+0x6a>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000290:	4a34      	ldr	r2, [pc, #208]	; (8000364 <WS2812_Send+0x134>)
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	211e      	movs	r1, #30
 8000296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	3301      	adds	r3, #1
 800029e:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	dae2      	bge.n	8000272 <WS2812_Send+0x42>
	for (int i= 0; i<MAX_LED; i++)
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
 80002b2:	69bb      	ldr	r3, [r7, #24]
 80002b4:	2b3b      	cmp	r3, #59	; 0x3b
 80002b6:	ddc5      	ble.n	8000244 <WS2812_Send+0x14>
		}

	}

	for (int i=0; i<50; i++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	e00a      	b.n	80002d4 <WS2812_Send+0xa4>
	{
		pwmData[indx] = 0;
 80002be:	4a29      	ldr	r2, [pc, #164]	; (8000364 <WS2812_Send+0x134>)
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	2100      	movs	r1, #0
 80002c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	3301      	adds	r3, #1
 80002cc:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	3301      	adds	r3, #1
 80002d2:	613b      	str	r3, [r7, #16]
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	2b31      	cmp	r3, #49	; 0x31
 80002d8:	ddf1      	ble.n	80002be <WS2812_Send+0x8e>
	}

	switch (ledStrip) {
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	3b31      	subs	r3, #49	; 0x31
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d82a      	bhi.n	8000338 <WS2812_Send+0x108>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <WS2812_Send+0xb8>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000309 	.word	0x08000309
 80002f0:	08000319 	.word	0x08000319
 80002f4:	08000329 	.word	0x08000329
	case '1': //PA11
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4a19      	ldr	r2, [pc, #100]	; (8000364 <WS2812_Send+0x134>)
 80002fe:	2100      	movs	r1, #0
 8000300:	4819      	ldr	r0, [pc, #100]	; (8000368 <WS2812_Send+0x138>)
 8000302:	f001 fd81 	bl	8001e08 <HAL_TIM_PWM_Start_DMA>
		break;
 8000306:	e01f      	b.n	8000348 <WS2812_Send+0x118>
	case '2': //PA0
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	b29b      	uxth	r3, r3
 800030c:	4a15      	ldr	r2, [pc, #84]	; (8000364 <WS2812_Send+0x134>)
 800030e:	2104      	movs	r1, #4
 8000310:	4815      	ldr	r0, [pc, #84]	; (8000368 <WS2812_Send+0x138>)
 8000312:	f001 fd79 	bl	8001e08 <HAL_TIM_PWM_Start_DMA>
		break;
 8000316:	e017      	b.n	8000348 <WS2812_Send+0x118>
	case '3': //PA1
		HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	b29b      	uxth	r3, r3
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <WS2812_Send+0x134>)
 800031e:	2108      	movs	r1, #8
 8000320:	4812      	ldr	r0, [pc, #72]	; (800036c <WS2812_Send+0x13c>)
 8000322:	f001 fd71 	bl	8001e08 <HAL_TIM_PWM_Start_DMA>
		break;
 8000326:	e00f      	b.n	8000348 <WS2812_Send+0x118>
	case '4': //PB1
		HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)pwmData, indx);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	b29b      	uxth	r3, r3
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <WS2812_Send+0x134>)
 800032e:	210c      	movs	r1, #12
 8000330:	480e      	ldr	r0, [pc, #56]	; (800036c <WS2812_Send+0x13c>)
 8000332:	f001 fd69 	bl	8001e08 <HAL_TIM_PWM_Start_DMA>
		break;
 8000336:	e007      	b.n	8000348 <WS2812_Send+0x118>
	default: //same as case 1
		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	b29b      	uxth	r3, r3
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <WS2812_Send+0x134>)
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <WS2812_Send+0x138>)
 8000342:	f001 fd61 	bl	8001e08 <HAL_TIM_PWM_Start_DMA>
		break;
 8000346:	bf00      	nop
	}
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t *)pwmData, indx);
	while (!dataSentFlag){};
 8000348:	bf00      	nop
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <WS2812_Send+0x140>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0fb      	beq.n	800034a <WS2812_Send+0x11a>
	dataSentFlag = 0;
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <WS2812_Send+0x140>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	3720      	adds	r7, #32
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	200001cc 	.word	0x200001cc
 8000364:	200002bc 	.word	0x200002bc
 8000368:	20000028 	.word	0x20000028
 800036c:	20000070 	.word	0x20000070
 8000370:	200001c8 	.word	0x200001c8

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 fb99 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 f845 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f000 f985 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 8000386:	f000 f94d 	bl	8000624 <MX_DMA_Init>
  MX_TIM3_Init();
 800038a:	f000 f8e7 	bl	800055c <MX_TIM3_Init>
  MX_TIM2_Init();
 800038e:	f000 f883 	bl	8000498 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int redLEDIndex = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]

  while (1) {
    /* Set 59 LEDs in green and one in red */
    for (int i = 0; i < MAX_LED; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	e013      	b.n	80003c4 <main+0x50>
      if (i == redLEDIndex) {
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d106      	bne.n	80003b2 <main+0x3e>
        Set_LED(i, 255, 0, 0);  // Set the LED at redLEDIndex to red
 80003a4:	2300      	movs	r3, #0
 80003a6:	2200      	movs	r2, #0
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	6838      	ldr	r0, [r7, #0]
 80003ac:	f7ff ff14 	bl	80001d8 <Set_LED>
 80003b0:	e005      	b.n	80003be <main+0x4a>
      } else {
        Set_LED(i, 0, 255, 0);  // Set all other LEDs to green
 80003b2:	2300      	movs	r3, #0
 80003b4:	22ff      	movs	r2, #255	; 0xff
 80003b6:	2100      	movs	r1, #0
 80003b8:	6838      	ldr	r0, [r7, #0]
 80003ba:	f7ff ff0d 	bl	80001d8 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b3b      	cmp	r3, #59	; 0x3b
 80003c8:	dde8      	ble.n	800039c <main+0x28>
      }
    }

    // Modify the following lines to use different timers for different LED strips
    WS2812_Send('1');  // LED Strip 1
 80003ca:	2031      	movs	r0, #49	; 0x31
 80003cc:	f7ff ff30 	bl	8000230 <WS2812_Send>
    WS2812_Send('2');  // LED Strip 2
 80003d0:	2032      	movs	r0, #50	; 0x32
 80003d2:	f7ff ff2d 	bl	8000230 <WS2812_Send>
    WS2812_Send('3');  // LED Strip 3
 80003d6:	2033      	movs	r0, #51	; 0x33
 80003d8:	f7ff ff2a 	bl	8000230 <WS2812_Send>
    WS2812_Send('4');  // LED Strip 4
 80003dc:	2034      	movs	r0, #52	; 0x34
 80003de:	f7ff ff27 	bl	8000230 <WS2812_Send>

    /* Move the red LED through the array */
    redLEDIndex = (redLEDIndex + 1) % MAX_LED;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	1c5a      	adds	r2, r3, #1
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <main+0x94>)
 80003e8:	fb83 1302 	smull	r1, r3, r3, r2
 80003ec:	4413      	add	r3, r2
 80003ee:	1159      	asrs	r1, r3, #5
 80003f0:	17d3      	asrs	r3, r2, #31
 80003f2:	1ac9      	subs	r1, r1, r3
 80003f4:	460b      	mov	r3, r1
 80003f6:	011b      	lsls	r3, r3, #4
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	607b      	str	r3, [r7, #4]

    /* Add a delay to control the speed of the movement */
    HAL_Delay(100);  // Adjust the delay value as needed
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fbb7 	bl	8000b74 <HAL_Delay>
    for (int i = 0; i < MAX_LED; i++) {
 8000406:	e7c6      	b.n	8000396 <main+0x22>
 8000408:	88888889 	.word	0x88888889

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fb92 	bl	8002b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	2302      	movs	r3, #2
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f001 f8a9 	bl	80015ac <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000460:	f000 f944 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2302      	movs	r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2102      	movs	r1, #2
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fb16 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800048a:	f000 f92f 	bl	80006ec <Error_Handler>
  }
}
 800048e:	bf00      	nop
 8000490:	3740      	adds	r7, #64	; 0x40
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049e:	f107 0320 	add.w	r3, r7, #32
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004c2:	4b25      	ldr	r3, [pc, #148]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004d0:	2259      	movs	r2, #89	; 0x59
 80004d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004e0:	481d      	ldr	r0, [pc, #116]	; (8000558 <MX_TIM2_Init+0xc0>)
 80004e2:	f001 fc41 	bl	8001d68 <HAL_TIM_PWM_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004ec:	f000 f8fe 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f8:	f107 0320 	add.w	r3, r7, #32
 80004fc:	4619      	mov	r1, r3
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <MX_TIM2_Init+0xc0>)
 8000500:	f002 fa9e 	bl	8002a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800050a:	f000 f8ef 	bl	80006ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050e:	2360      	movs	r3, #96	; 0x60
 8000510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_TIM2_Init+0xc0>)
 8000526:	f001 fed7 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000530:	f000 f8dc 	bl	80006ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2204      	movs	r2, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM2_Init+0xc0>)
 800053c:	f001 fecc 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000546:	f000 f8d1 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM2_Init+0xc0>)
 800054c:	f000 f9e2 	bl	8000914 <HAL_TIM_MspPostInit>

}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	; 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000028 	.word	0x20000028

0800055c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <MX_TIM3_Init+0xc0>)
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <MX_TIM3_Init+0xc4>)
 8000582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_TIM3_Init+0xc0>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <MX_TIM3_Init+0xc0>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_TIM3_Init+0xc0>)
 8000592:	2259      	movs	r2, #89	; 0x59
 8000594:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_TIM3_Init+0xc0>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_TIM3_Init+0xc0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_TIM3_Init+0xc0>)
 80005a4:	f001 fbe0 	bl	8001d68 <HAL_TIM_PWM_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 f89d 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4619      	mov	r1, r3
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <MX_TIM3_Init+0xc0>)
 80005c2:	f002 fa3d 	bl	8002a40 <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80005cc:	f000 f88e 	bl	80006ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2208      	movs	r2, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM3_Init+0xc0>)
 80005e8:	f001 fe76 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80005f2:	f000 f87b 	bl	80006ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	220c      	movs	r2, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <MX_TIM3_Init+0xc0>)
 80005fe:	f001 fe6b 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000608:	f000 f870 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <MX_TIM3_Init+0xc0>)
 800060e:	f000 f981 	bl	8000914 <HAL_TIM_MspPostInit>

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000070 	.word	0x20000070
 8000620:	40000400 	.word	0x40000400

08000624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_DMA_Init+0x68>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_DMA_Init+0x68>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_DMA_Init+0x68>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	200c      	movs	r0, #12
 8000648:	f000 fb8f 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800064c:	200c      	movs	r0, #12
 800064e:	f000 fba8 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	200d      	movs	r0, #13
 8000658:	f000 fb87 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800065c:	200d      	movs	r0, #13
 800065e:	f000 fba0 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	200f      	movs	r0, #15
 8000668:	f000 fb7f 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800066c:	200f      	movs	r0, #15
 800066e:	f000 fb98 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2011      	movs	r0, #17
 8000678:	f000 fb77 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800067c:	2011      	movs	r0, #17
 800067e:	f000 fb90 	bl	8000da2 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_GPIO_Init+0x58>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_GPIO_Init+0x58>)
 800069c:	f043 0320 	orr.w	r3, r3, #32
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0320 	and.w	r3, r3, #32
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x58>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x40>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <HAL_MspInit+0x40>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_MspInit+0x40>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x40>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_MspInit+0x40>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x40>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074c:	d162      	bne.n	8000814 <HAL_TIM_PWM_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074e:	4b67      	ldr	r3, [pc, #412]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a66      	ldr	r2, [pc, #408]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b64      	ldr	r3, [pc, #400]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000766:	4b62      	ldr	r3, [pc, #392]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000768:	4a62      	ldr	r2, [pc, #392]	; (80008f4 <HAL_TIM_PWM_MspInit+0x1b8>)
 800076a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800076c:	4b60      	ldr	r3, [pc, #384]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 800076e:	2210      	movs	r2, #16
 8000770:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000778:	4b5d      	ldr	r3, [pc, #372]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800077e:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000784:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800078e:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000794:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800079a:	4855      	ldr	r0, [pc, #340]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 800079c:	f000 fb1c 	bl	8000dd8 <HAL_DMA_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 80007a6:	f7ff ffa1 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a50      	ldr	r2, [pc, #320]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
 80007b0:	4a4f      	ldr	r2, [pc, #316]	; (80008f0 <HAL_TIM_PWM_MspInit+0x1b4>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007b8:	4a50      	ldr	r2, [pc, #320]	; (80008fc <HAL_TIM_PWM_MspInit+0x1c0>)
 80007ba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007bc:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007be:	2210      	movs	r2, #16
 80007c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4b4d      	ldr	r3, [pc, #308]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ce:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80007ea:	4843      	ldr	r0, [pc, #268]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007ec:	f000 faf4 	bl	8000dd8 <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_TIM_PWM_MspInit+0xbe>
    {
      Error_Handler();
 80007f6:	f7ff ff79 	bl	80006ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a3e      	ldr	r2, [pc, #248]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000800:	4a3d      	ldr	r2, [pc, #244]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
 800080c:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <HAL_TIM_PWM_MspInit+0x1bc>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000812:	e066      	b.n	80008e2 <HAL_TIM_PWM_MspInit+0x1a6>
  else if(htim_pwm->Instance==TIM3)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a39      	ldr	r2, [pc, #228]	; (8000900 <HAL_TIM_PWM_MspInit+0x1c4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d161      	bne.n	80008e2 <HAL_TIM_PWM_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a32      	ldr	r2, [pc, #200]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <HAL_TIM_PWM_MspInit+0x1b0>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <HAL_TIM_PWM_MspInit+0x1cc>)
 800083a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800083e:	2210      	movs	r2, #16
 8000840:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000854:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800086a:	4826      	ldr	r0, [pc, #152]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800086c:	f000 fab4 	bl	8000dd8 <HAL_DMA_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_TIM_PWM_MspInit+0x13e>
      Error_Handler();
 8000876:	f7ff ff39 	bl	80006ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800088a:	621a      	str	r2, [r3, #32]
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_TIM_PWM_MspInit+0x1c8>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <HAL_TIM_PWM_MspInit+0x1d4>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 800089a:	2210      	movs	r2, #16
 800089c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008c8:	f000 fa86 	bl	8000dd8 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_TIM_PWM_MspInit+0x19a>
      Error_Handler();
 80008d2:	f7ff ff0b 	bl	80006ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_TIM_PWM_MspInit+0x1d0>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	40020058 	.word	0x40020058
 80008f8:	200000fc 	.word	0x200000fc
 80008fc:	40020080 	.word	0x40020080
 8000900:	40000400 	.word	0x40000400
 8000904:	20000140 	.word	0x20000140
 8000908:	40020030 	.word	0x40020030
 800090c:	20000184 	.word	0x20000184
 8000910:	4002001c 	.word	0x4002001c

08000914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000932:	d118      	bne.n	8000966 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800094c:	2303      	movs	r3, #3
 800094e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <HAL_TIM_MspPostInit+0x98>)
 8000960:	f000 fca0 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000964:	e01c      	b.n	80009a0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_TIM_MspPostInit+0x9c>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d117      	bne.n	80009a0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_TIM_MspPostInit+0x94>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000988:	2303      	movs	r3, #3
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <HAL_TIM_MspPostInit+0xa0>)
 800099c:	f000 fc82 	bl	80012a4 <HAL_GPIO_Init>
}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f89d 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Channel2_IRQHandler+0x10>)
 8000a0e:	f000 fb15 	bl	800103c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000184 	.word	0x20000184

08000a1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <DMA1_Channel3_IRQHandler+0x10>)
 8000a22:	f000 fb0b 	bl	800103c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000140 	.word	0x20000140

08000a30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <DMA1_Channel5_IRQHandler+0x10>)
 8000a36:	f000 fb01 	bl	800103c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000b8 	.word	0x200000b8

08000a44 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA1_Channel7_IRQHandler+0x10>)
 8000a4a:	f000 faf7 	bl	800103c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000fc 	.word	0x200000fc

08000a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff fff8 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6a:	490c      	ldr	r1, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a80:	4c09      	ldr	r4, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 f835 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fc6f 	bl	8000374 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa0:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa8:	20000e64 	.word	0x20000e64

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f947 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe14 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f95f 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f927 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000e60 	.word	0x20000e60

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000e60 	.word	0x20000e60

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff2d 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff42 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff35 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e043      	b.n	8000e76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_DMA_Init+0xa8>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_DMA_Init+0xac>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_DMA_Init+0xb0>)
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	bffdfff8 	.word	0xbffdfff8
 8000e84:	cccccccd 	.word	0xcccccccd
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <HAL_DMA_Start_IT+0x20>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e04b      	b.n	8000f44 <HAL_DMA_Start_IT+0xb8>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d13a      	bne.n	8000f36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f9af 	bl	8001248 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 020e 	orr.w	r2, r2, #14
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e00f      	b.n	8000f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0204 	bic.w	r2, r2, #4
 8000f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 020a 	orr.w	r2, r2, #10
 8000f22:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e005      	b.n	8000f42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d005      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2204      	movs	r2, #4
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e051      	b.n	8001014 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 020e 	bic.w	r2, r2, #14
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <HAL_DMA_Abort_IT+0xd4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d029      	beq.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <HAL_DMA_Abort_IT+0xd8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d022      	beq.n	8000fea <HAL_DMA_Abort_IT+0x9e>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <HAL_DMA_Abort_IT+0xdc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01a      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x98>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_DMA_Abort_IT+0xe0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d012      	beq.n	8000fde <HAL_DMA_Abort_IT+0x92>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_DMA_Abort_IT+0xe4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_DMA_Abort_IT+0x8c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_DMA_Abort_IT+0xe8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d102      	bne.n	8000fd2 <HAL_DMA_Abort_IT+0x86>
 8000fcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fd0:	e00e      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd6:	e00b      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	e008      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	e005      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe8:	e002      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fea:	2310      	movs	r3, #16
 8000fec:	e000      	b.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_DMA_Abort_IT+0xec>)
 8000ff2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
    } 
  }
  return status;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020008 	.word	0x40020008
 8001024:	4002001c 	.word	0x4002001c
 8001028:	40020030 	.word	0x40020030
 800102c:	40020044 	.word	0x40020044
 8001030:	40020058 	.word	0x40020058
 8001034:	4002006c 	.word	0x4002006c
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	2204      	movs	r2, #4
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d04f      	beq.n	8001104 <HAL_DMA_IRQHandler+0xc8>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	d04a      	beq.n	8001104 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_DMA_IRQHandler+0x1f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d029      	beq.n	80010ea <HAL_DMA_IRQHandler+0xae>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <HAL_DMA_IRQHandler+0x1f4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d022      	beq.n	80010e6 <HAL_DMA_IRQHandler+0xaa>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a63      	ldr	r2, [pc, #396]	; (8001234 <HAL_DMA_IRQHandler+0x1f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01a      	beq.n	80010e0 <HAL_DMA_IRQHandler+0xa4>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a62      	ldr	r2, [pc, #392]	; (8001238 <HAL_DMA_IRQHandler+0x1fc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d012      	beq.n	80010da <HAL_DMA_IRQHandler+0x9e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a60      	ldr	r2, [pc, #384]	; (800123c <HAL_DMA_IRQHandler+0x200>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00a      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x98>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a5f      	ldr	r2, [pc, #380]	; (8001240 <HAL_DMA_IRQHandler+0x204>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d102      	bne.n	80010ce <HAL_DMA_IRQHandler+0x92>
 80010c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010cc:	e00e      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010d2:	e00b      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d8:	e008      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010de:	e005      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e4:	e002      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	e000      	b.n	80010ec <HAL_DMA_IRQHandler+0xb0>
 80010ea:	2304      	movs	r3, #4
 80010ec:	4a55      	ldr	r2, [pc, #340]	; (8001244 <HAL_DMA_IRQHandler+0x208>)
 80010ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8094 	beq.w	8001222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001102:	e08e      	b.n	8001222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	2202      	movs	r2, #2
 800110a:	409a      	lsls	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d056      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x186>
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d051      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 020a 	bic.w	r2, r2, #10
 800113a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a38      	ldr	r2, [pc, #224]	; (800122c <HAL_DMA_IRQHandler+0x1f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d029      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x166>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a37      	ldr	r2, [pc, #220]	; (8001230 <HAL_DMA_IRQHandler+0x1f4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d022      	beq.n	800119e <HAL_DMA_IRQHandler+0x162>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a35      	ldr	r2, [pc, #212]	; (8001234 <HAL_DMA_IRQHandler+0x1f8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01a      	beq.n	8001198 <HAL_DMA_IRQHandler+0x15c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <HAL_DMA_IRQHandler+0x1fc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d012      	beq.n	8001192 <HAL_DMA_IRQHandler+0x156>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a32      	ldr	r2, [pc, #200]	; (800123c <HAL_DMA_IRQHandler+0x200>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00a      	beq.n	800118c <HAL_DMA_IRQHandler+0x150>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_DMA_IRQHandler+0x204>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d102      	bne.n	8001186 <HAL_DMA_IRQHandler+0x14a>
 8001180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001184:	e00e      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 8001186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118a:	e00b      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 800118c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001190:	e008      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	e005      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	e002      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 800119e:	2320      	movs	r3, #32
 80011a0:	e000      	b.n	80011a4 <HAL_DMA_IRQHandler+0x168>
 80011a2:	2302      	movs	r3, #2
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_DMA_IRQHandler+0x208>)
 80011a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d034      	beq.n	8001222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011c0:	e02f      	b.n	8001222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2208      	movs	r2, #8
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d028      	beq.n	8001224 <HAL_DMA_IRQHandler+0x1e8>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d023      	beq.n	8001224 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 020e 	bic.w	r2, r2, #14
 80011ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
    }
  }
  return;
 8001222:	bf00      	nop
 8001224:	bf00      	nop
}
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40020008 	.word	0x40020008
 8001230:	4002001c 	.word	0x4002001c
 8001234:	40020030 	.word	0x40020030
 8001238:	40020044 	.word	0x40020044
 800123c:	40020058 	.word	0x40020058
 8001240:	4002006c 	.word	0x4002006c
 8001244:	40020000 	.word	0x40020000

08001248 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d108      	bne.n	8001288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001286:	e007      	b.n	8001298 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	60da      	str	r2, [r3, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b08b      	sub	sp, #44	; 0x2c
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	e169      	b.n	800158c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b8:	2201      	movs	r2, #1
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 8158 	bne.w	8001586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a9a      	ldr	r2, [pc, #616]	; (8001544 <HAL_GPIO_Init+0x2a0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d05e      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012e0:	4a98      	ldr	r2, [pc, #608]	; (8001544 <HAL_GPIO_Init+0x2a0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d875      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012e6:	4a98      	ldr	r2, [pc, #608]	; (8001548 <HAL_GPIO_Init+0x2a4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d058      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012ec:	4a96      	ldr	r2, [pc, #600]	; (8001548 <HAL_GPIO_Init+0x2a4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d86f      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012f2:	4a96      	ldr	r2, [pc, #600]	; (800154c <HAL_GPIO_Init+0x2a8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d052      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012f8:	4a94      	ldr	r2, [pc, #592]	; (800154c <HAL_GPIO_Init+0x2a8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d869      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012fe:	4a94      	ldr	r2, [pc, #592]	; (8001550 <HAL_GPIO_Init+0x2ac>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d04c      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 8001304:	4a92      	ldr	r2, [pc, #584]	; (8001550 <HAL_GPIO_Init+0x2ac>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d863      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 800130a:	4a92      	ldr	r2, [pc, #584]	; (8001554 <HAL_GPIO_Init+0x2b0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d046      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 8001310:	4a90      	ldr	r2, [pc, #576]	; (8001554 <HAL_GPIO_Init+0x2b0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d85d      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d82a      	bhi.n	8001370 <HAL_GPIO_Init+0xcc>
 800131a:	2b12      	cmp	r3, #18
 800131c:	d859      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <HAL_GPIO_Init+0x80>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	0800139f 	.word	0x0800139f
 8001328:	08001379 	.word	0x08001379
 800132c:	0800138b 	.word	0x0800138b
 8001330:	080013cd 	.word	0x080013cd
 8001334:	080013d3 	.word	0x080013d3
 8001338:	080013d3 	.word	0x080013d3
 800133c:	080013d3 	.word	0x080013d3
 8001340:	080013d3 	.word	0x080013d3
 8001344:	080013d3 	.word	0x080013d3
 8001348:	080013d3 	.word	0x080013d3
 800134c:	080013d3 	.word	0x080013d3
 8001350:	080013d3 	.word	0x080013d3
 8001354:	080013d3 	.word	0x080013d3
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013d3 	.word	0x080013d3
 8001360:	080013d3 	.word	0x080013d3
 8001364:	080013d3 	.word	0x080013d3
 8001368:	08001381 	.word	0x08001381
 800136c:	08001395 	.word	0x08001395
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <HAL_GPIO_Init+0x2b4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001376:	e02c      	b.n	80013d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e029      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	3304      	adds	r3, #4
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e024      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	3308      	adds	r3, #8
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e01f      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	330c      	adds	r3, #12
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e01a      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013a6:	2304      	movs	r3, #4
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e013      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	611a      	str	r2, [r3, #16]
          break;
 80013be:	e009      	b.n	80013d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c0:	2308      	movs	r3, #8
 80013c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	615a      	str	r2, [r3, #20]
          break;
 80013ca:	e003      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          break;
 80013d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d801      	bhi.n	80013de <HAL_GPIO_Init+0x13a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_Init+0x13e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3304      	adds	r3, #4
 80013e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2bff      	cmp	r3, #255	; 0xff
 80013e8:	d802      	bhi.n	80013f0 <HAL_GPIO_Init+0x14c>
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x152>
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	3b08      	subs	r3, #8
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	210f      	movs	r1, #15
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	6a39      	ldr	r1, [r7, #32]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80b1 	beq.w	8001586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_GPIO_Init+0x2b8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2bc>)
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <HAL_GPIO_Init+0x2c4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3e      	ldr	r2, [pc, #248]	; (800156c <HAL_GPIO_Init+0x2c8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3d      	ldr	r2, [pc, #244]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1e0>
 8001480:	2303      	movs	r3, #3
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001484:	2304      	movs	r3, #4
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001490:	2300      	movs	r3, #0
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x2bc>)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	492c      	ldr	r1, [pc, #176]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4928      	ldr	r1, [pc, #160]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	4922      	ldr	r1, [pc, #136]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	491e      	ldr	r1, [pc, #120]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4918      	ldr	r1, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4914      	ldr	r1, [pc, #80]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d021      	beq.n	8001578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	490e      	ldr	r1, [pc, #56]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e021      	b.n	8001586 <HAL_GPIO_Init+0x2e2>
 8001542:	bf00      	nop
 8001544:	10320000 	.word	0x10320000
 8001548:	10310000 	.word	0x10310000
 800154c:	10220000 	.word	0x10220000
 8001550:	10210000 	.word	0x10210000
 8001554:	10120000 	.word	0x10120000
 8001558:	10110000 	.word	0x10110000
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	40010800 	.word	0x40010800
 8001568:	40010c00 	.word	0x40010c00
 800156c:	40011000 	.word	0x40011000
 8001570:	40011400 	.word	0x40011400
 8001574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_GPIO_Init+0x304>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	43db      	mvns	r3, r3
 8001580:	4909      	ldr	r1, [pc, #36]	; (80015a8 <HAL_GPIO_Init+0x304>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	3301      	adds	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	f47f ae8e 	bne.w	80012b8 <HAL_GPIO_Init+0x14>
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	372c      	adds	r7, #44	; 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e272      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015cc:	4b92      	ldr	r3, [pc, #584]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d8:	4b8f      	ldr	r3, [pc, #572]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
 80015e4:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b89      	ldr	r3, [pc, #548]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x12c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d168      	bne.n	80016d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e24c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x76>
 8001614:	4b80      	ldr	r3, [pc, #512]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e02e      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b78      	ldr	r3, [pc, #480]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a77      	ldr	r2, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0xbc>
 800164e:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a71      	ldr	r2, [pc, #452]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001668:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a67      	ldr	r2, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fa6a 	bl	8000b60 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fa66 	bl	8000b60 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e200      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0xe4>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fa56 	bl	8000b60 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa52 	bl	8000b60 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1ec      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x10c>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d063      	beq.n	80017ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x18c>
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x176>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1c0      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4939      	ldr	r1, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e03a      	b.n	80017ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fa0b 	bl	8000b60 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fa07 	bl	8000b60 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1a1      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff f9ea 	bl	8000b60 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff f9e6 	bl	8000b60 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e180      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03a      	beq.n	8001830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d019      	beq.n	80017f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCC_OscConfig+0x274>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f9ca 	bl	8000b60 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff f9c6 	bl	8000b60 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e160      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 fa9c 	bl	8001d2c <RCC_Delay>
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_OscConfig+0x274>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff f9b0 	bl	8000b60 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001802:	e00f      	b.n	8001824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff f9ac 	bl	8000b60 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d908      	bls.n	8001824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e146      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	42420000 	.word	0x42420000
 8001820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e9      	bne.n	8001804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a6 	beq.w	800198a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b8b      	ldr	r3, [pc, #556]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a87      	ldr	r2, [pc, #540]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <HAL_RCC_OscConfig+0x4c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x4c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7e      	ldr	r2, [pc, #504]	; (8001a74 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff f96d 	bl	8000b60 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff f969 	bl	8000b60 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b64      	cmp	r3, #100	; 0x64
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e103      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x4c8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x312>
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	e02d      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x334>
 80018c6:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a66      	ldr	r2, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	e01c      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x356>
 80018e8:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a60      	ldr	r2, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a5d      	ldr	r2, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d015      	beq.n	800194e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff f91d 	bl	8000b60 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f919 	bl	8000b60 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0b1      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ee      	beq.n	800192a <HAL_RCC_OscConfig+0x37e>
 800194c:	e014      	b.n	8001978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f907 	bl	8000b60 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff f903 	bl	8000b60 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e09b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ee      	bne.n	8001956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a3b      	ldr	r2, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d061      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d146      	bne.n	8001a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_RCC_OscConfig+0x4cc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f8d7 	bl	8000b60 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f8d3 	bl	8000b60 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e06d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4921      	ldr	r1, [pc, #132]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a19      	ldr	r1, [r3, #32]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	430b      	orrs	r3, r1
 8001a02:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8a7 	bl	8000b60 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff f8a3 	bl	8000b60 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e03d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x46a>
 8001a34:	e035      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x4cc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f890 	bl	8000b60 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f88c 	bl	8000b60 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e026      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x498>
 8001a62:	e01e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e019      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_OscConfig+0x500>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0d0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d910      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	4965      	ldr	r1, [pc, #404]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	494d      	ldr	r1, [pc, #308]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d040      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e073      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06b      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe ffde 	bl	8000b60 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7fe ffda 	bl	8000b60 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e053      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d210      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e032      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4916      	ldr	r1, [pc, #88]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3e:	f000 f821 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1cc>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1d0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe ff3c 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08002b6c 	.word	0x08002b6c
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x36>
 8001cb2:	e027      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb6:	613b      	str	r3, [r7, #16]
      break;
 8001cb8:	e027      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0c9b      	lsrs	r3, r3, #18
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d010      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0c5b      	lsrs	r3, r3, #17
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce6:	fb03 f202 	mul.w	r2, r3, r2
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e004      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	613b      	str	r3, [r7, #16]
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d06:	613b      	str	r3, [r7, #16]
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	693b      	ldr	r3, [r7, #16]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	08002b7c 	.word	0x08002b7c
 8001d24:	08002b8c 	.word	0x08002b8c
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <RCC_Delay+0x34>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <RCC_Delay+0x38>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a5b      	lsrs	r3, r3, #9
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d48:	bf00      	nop
  }
  while (Delay --);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f9      	bne.n	8001d48 <RCC_Delay+0x1c>
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000000 	.word	0x20000000
 8001d64:	10624dd3 	.word	0x10624dd3

08001d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e041      	b.n	8001dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fcd4 	bl	800073c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 fc3c 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_TIM_PWM_Start_DMA+0x2c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e022      	b.n	8001e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d109      	bne.n	8001e4e <HAL_TIM_PWM_Start_DMA+0x46>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e015      	b.n	8001e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d109      	bne.n	8001e68 <HAL_TIM_PWM_Start_DMA+0x60>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e008      	b.n	8001e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e153      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_TIM_PWM_Start_DMA+0x94>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e022      	b.n	8001ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d109      	bne.n	8001eb6 <HAL_TIM_PWM_Start_DMA+0xae>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	e015      	b.n	8001ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d109      	bne.n	8001ed0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e008      	b.n	8001ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d024      	beq.n	8001f30 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_TIM_PWM_Start_DMA+0xea>
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e119      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <HAL_TIM_PWM_Start_DMA+0xfe>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f04:	e016      	b.n	8001f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d104      	bne.n	8001f16 <HAL_TIM_PWM_Start_DMA+0x10e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f14:	e00e      	b.n	8001f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d104      	bne.n	8001f26 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f24:	e006      	b.n	8001f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f2e:	e001      	b.n	8001f34 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0fa      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	f200 80ae 	bhi.w	8002098 <HAL_TIM_PWM_Start_DMA+0x290>
 8001f3c:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002099 	.word	0x08002099
 8001f4c:	08002099 	.word	0x08002099
 8001f50:	08002099 	.word	0x08002099
 8001f54:	08001fc1 	.word	0x08001fc1
 8001f58:	08002099 	.word	0x08002099
 8001f5c:	08002099 	.word	0x08002099
 8001f60:	08002099 	.word	0x08002099
 8001f64:	08002009 	.word	0x08002009
 8001f68:	08002099 	.word	0x08002099
 8001f6c:	08002099 	.word	0x08002099
 8001f70:	08002099 	.word	0x08002099
 8001f74:	08002051 	.word	0x08002051
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	4a6d      	ldr	r2, [pc, #436]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	4a6c      	ldr	r2, [pc, #432]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	4a6b      	ldr	r2, [pc, #428]	; (800213c <HAL_TIM_PWM_Start_DMA+0x334>)
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3334      	adds	r3, #52	; 0x34
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	f7fe ff74 	bl	8000e8c <HAL_DMA_Start_IT>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0bd      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbc:	60da      	str	r2, [r3, #12]
      break;
 8001fbe:	e06e      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	4a5b      	ldr	r2, [pc, #364]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_TIM_PWM_Start_DMA+0x334>)
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3338      	adds	r3, #56	; 0x38
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	f7fe ff50 	bl	8000e8c <HAL_DMA_Start_IT>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e099      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002004:	60da      	str	r2, [r3, #12]
      break;
 8002006:	e04a      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_TIM_PWM_Start_DMA+0x334>)
 800201e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	333c      	adds	r3, #60	; 0x3c
 800202c:	461a      	mov	r2, r3
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	f7fe ff2c 	bl	8000e8c <HAL_DMA_Start_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e075      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204c:	60da      	str	r2, [r3, #12]
      break;
 800204e:	e026      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a37      	ldr	r2, [pc, #220]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a36      	ldr	r2, [pc, #216]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x330>)
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a35      	ldr	r2, [pc, #212]	; (800213c <HAL_TIM_PWM_Start_DMA+0x334>)
 8002066:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3340      	adds	r3, #64	; 0x40
 8002074:	461a      	mov	r2, r3
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	f7fe ff08 	bl	8000e8c <HAL_DMA_Start_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e051      	b.n	800212a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002094:	60da      	str	r2, [r3, #12]
      break;
 8002096:	e002      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
      break;
 800209c:	bf00      	nop
  }

  if (status == HAL_OK)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d141      	bne.n	8002128 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fca3 	bl	80029f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_TIM_PWM_Start_DMA+0x338>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_TIM_PWM_Start_DMA+0x338>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00e      	beq.n	80020f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d009      	beq.n	80020f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_TIM_PWM_Start_DMA+0x340>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d010      	beq.n	8002128 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002116:	e007      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08002513 	.word	0x08002513
 8002138:	080025bb 	.word	0x080025bb
 800213c:	08002481 	.word	0x08002481
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800

0800214c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d855      	bhi.n	800220c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	0800219d 	.word	0x0800219d
 800216c:	0800220d 	.word	0x0800220d
 8002170:	0800220d 	.word	0x0800220d
 8002174:	0800220d 	.word	0x0800220d
 8002178:	080021b9 	.word	0x080021b9
 800217c:	0800220d 	.word	0x0800220d
 8002180:	0800220d 	.word	0x0800220d
 8002184:	0800220d 	.word	0x0800220d
 8002188:	080021d5 	.word	0x080021d5
 800218c:	0800220d 	.word	0x0800220d
 8002190:	0800220d 	.word	0x0800220d
 8002194:	0800220d 	.word	0x0800220d
 8002198:	080021f1 	.word	0x080021f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fecb 	bl	8000f4c <HAL_DMA_Abort_IT>
      break;
 80021b6:	e02c      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe febd 	bl	8000f4c <HAL_DMA_Abort_IT>
      break;
 80021d2:	e01e      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe feaf 	bl	8000f4c <HAL_DMA_Abort_IT>
      break;
 80021ee:	e010      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fea1 	bl	8000f4c <HAL_DMA_Abort_IT>
      break;
 800220a:	e002      	b.n	8002212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      break;
 8002210:	bf00      	nop
  }

  if (status == HAL_OK)
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fbe9 	bl	80029f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d117      	bne.n	8002260 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	f241 1311 	movw	r3, #4369	; 0x1111
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	f240 4344 	movw	r3, #1092	; 0x444
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	f241 1311 	movw	r3, #4369	; 0x1111
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10f      	bne.n	8002290 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	f240 4344 	movw	r3, #1092	; 0x444
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800229e:	e013      	b.n	80022c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d104      	bne.n	80022b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ae:	e00b      	b.n	80022c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d104      	bne.n	80022c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022be:	e003      	b.n	80022c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0ae      	b.n	8002454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	f200 809f 	bhi.w	8002444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002341 	.word	0x08002341
 8002310:	08002445 	.word	0x08002445
 8002314:	08002445 	.word	0x08002445
 8002318:	08002445 	.word	0x08002445
 800231c:	08002381 	.word	0x08002381
 8002320:	08002445 	.word	0x08002445
 8002324:	08002445 	.word	0x08002445
 8002328:	08002445 	.word	0x08002445
 800232c:	080023c3 	.word	0x080023c3
 8002330:	08002445 	.word	0x08002445
 8002334:	08002445 	.word	0x08002445
 8002338:	08002445 	.word	0x08002445
 800233c:	08002403 	.word	0x08002403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f9ce 	bl	80026e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6999      	ldr	r1, [r3, #24]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	619a      	str	r2, [r3, #24]
      break;
 800237e:	e064      	b.n	800244a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fa14 	bl	80027b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6999      	ldr	r1, [r3, #24]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	021a      	lsls	r2, r3, #8
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	619a      	str	r2, [r3, #24]
      break;
 80023c0:	e043      	b.n	800244a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa5d 	bl	8002888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0208 	orr.w	r2, r2, #8
 80023dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0204 	bic.w	r2, r2, #4
 80023ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	61da      	str	r2, [r3, #28]
      break;
 8002400:	e023      	b.n	800244a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 faa7 	bl	800295c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69d9      	ldr	r1, [r3, #28]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	61da      	str	r2, [r3, #28]
      break;
 8002442:	e002      	b.n	800244a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	75fb      	strb	r3, [r7, #23]
      break;
 8002448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a6:	e02a      	b.n	80024fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d107      	bne.n	80024c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c0:	e01d      	b.n	80024fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2204      	movs	r2, #4
 80024d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024da:	e010      	b.n	80024fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d107      	bne.n	80024f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024f4:	e003      	b.n	80024fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff ffb5 	bl	800246e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	771a      	strb	r2, [r3, #28]
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d10b      	bne.n	8002542 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d136      	bne.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002540:	e031      	b.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d10b      	bne.n	8002564 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2202      	movs	r2, #2
 8002550:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d125      	bne.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002562:	e020      	b.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2204      	movs	r2, #4
 8002572:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	e00f      	b.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d10a      	bne.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2208      	movs	r2, #8
 8002594:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7fd fdd0 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	771a      	strb	r2, [r3, #28]
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d103      	bne.n	80025da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	771a      	strb	r2, [r3, #28]
 80025d8:	e019      	b.n	800260e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d103      	bne.n	80025ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2202      	movs	r2, #2
 80025e8:	771a      	strb	r2, [r3, #28]
 80025ea:	e010      	b.n	800260e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d103      	bne.n	80025fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2204      	movs	r2, #4
 80025fa:	771a      	strb	r2, [r3, #28]
 80025fc:	e007      	b.n	800260e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d102      	bne.n	800260e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2208      	movs	r2, #8
 800260c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ff24 	bl	800245c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	771a      	strb	r2, [r3, #28]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a29      	ldr	r2, [pc, #164]	; (80026dc <TIM_Base_SetConfig+0xb8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x30>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <TIM_Base_SetConfig+0xbc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x30>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <TIM_Base_SetConfig+0xc0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <TIM_Base_SetConfig+0xb8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <TIM_Base_SetConfig+0xbc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0x62>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <TIM_Base_SetConfig+0xc0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <TIM_Base_SetConfig+0xb8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40000800 	.word	0x40000800

080026e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f023 0201 	bic.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <TIM_OC1_SetConfig+0xc8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10c      	bne.n	800275e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f023 0308 	bic.w	r3, r3, #8
 800274a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <TIM_OC1_SetConfig+0xc8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d111      	bne.n	800278a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800276c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	621a      	str	r2, [r3, #32]
}
 80027a4:	bf00      	nop
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40012c00 	.word	0x40012c00

080027b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 0210 	bic.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0320 	bic.w	r3, r3, #32
 80027fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <TIM_OC2_SetConfig+0xd0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10d      	bne.n	8002830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800282e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a14      	ldr	r2, [pc, #80]	; (8002884 <TIM_OC2_SetConfig+0xd0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d113      	bne.n	8002860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	621a      	str	r2, [r3, #32]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00

08002888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <TIM_OC3_SetConfig+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10d      	bne.n	8002902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <TIM_OC3_SetConfig+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	621a      	str	r2, [r3, #32]
}
 800294c:	bf00      	nop
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40012c00 	.word	0x40012c00

0800295c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	031b      	lsls	r3, r3, #12
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <TIM_OC4_SetConfig+0x98>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d109      	bne.n	80029d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e046      	b.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d009      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	2600      	movs	r6, #0
 8002b00:	4d0c      	ldr	r5, [pc, #48]	; (8002b34 <__libc_init_array+0x38>)
 8002b02:	4c0d      	ldr	r4, [pc, #52]	; (8002b38 <__libc_init_array+0x3c>)
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	f000 f822 	bl	8002b54 <_init>
 8002b10:	2600      	movs	r6, #0
 8002b12:	4d0a      	ldr	r5, [pc, #40]	; (8002b3c <__libc_init_array+0x40>)
 8002b14:	4c0a      	ldr	r4, [pc, #40]	; (8002b40 <__libc_init_array+0x44>)
 8002b16:	1b64      	subs	r4, r4, r5
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08002b90 	.word	0x08002b90
 8002b38:	08002b90 	.word	0x08002b90
 8002b3c:	08002b90 	.word	0x08002b90
 8002b40:	08002b94 	.word	0x08002b94

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
